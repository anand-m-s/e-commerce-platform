
<%- include("./partials/header") %>
<%- include("./partials/navigation") %>

<div class="container " >
  <main>
    <div class="text-center">
        <h2>Checkout</h2>
    </div>

    
      <div id="checkoutcard">

        <div class="col-md-6 col-lg-7">
          <h4 class="mb-3">Billing address</h4>
          <div class="add-address-btn">
            <button type="button" class="btn addaddressbtn" data-bs-toggle="modal" data-bs-target="#useraddress">Add a new address</button>
          </div>

          <% if (address && address.length > 0) { %>
            <div class="row">
              <% address.forEach((addr, index) => { %>
                <div class="col-md-6 mb-4">
                  <div class="card h-100 border-0 shadow-lg">
                    <div style="background-color: black; color: #fff;" class="card-header  d-flex justify-content-between ">
                      <h5 class="mb-0">Address <%= index + 1 %></h5>
                      <label class="mb-0">
                        <input type="radio" name="billingAddress" value="<%= index %>"> <!-- Use radio buttons for each address -->
                      </label>
                    </div>
                    <div class="card-body">
                        <ul class="list-unstyled mb-0">
                            <li><strong>Full Name:</strong> <%= addr.fullName %></li>
                            <li><strong>Address Line:</strong> <%= addr.addressline %></li>
                            <li><strong>City:</strong> <%= addr.city %></li>
                            <li><strong>State:</strong> <%= addr.state %></li>
                            <li><strong>Pincode:</strong> <%= addr.pincode %></li>
                            <li><strong>Country:</strong> <%= addr.country %></li>
                            <li><strong>Phone:</strong> <%= addr.phone %></li>
                        </ul>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <p class="text-muted">No addresses added yet.</p>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#useraddress">Add Address</button>
          <% } %>
        </div>

        <div class="col-md-6 col-lg-5 order-md-last" style="margin-left: 2rem;">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
              <span class="text-primary">Cart</span>
              <span class="badge bg-info"><%= cart.products.length %></span>
            </h4>
            <ul class="list-group mb-3">
              <% cart.products.forEach(item => { %>
                <li style="border: 0;" class="list-group-item d-flex justify-content-between shadow-lg">
                  <div class="d-flex align-items-center">
                    <img style="width: 10rem; border-radius: 2rem;" src="/images/uploads/<%= item.product.ProductImage[0].filename %>" alt="<%= item.product.Name %>" class="product-image">
                    <div class="ms-3">
                      <h6 class="my-0"><%= item.product.Name %></h6>
                      <small class="text-body-secondary"><%= item.product.Brand %> <%= item.product.Features[0].Ram %> <%= item.product.Features[0].Storage %><br><%= item.product.Features[0].Processor %></small>
                    </div>
                  </div>
                  <span class="d-flex">
                    â‚¹<%= item.product.Price %> x <%= item.quantity %>
                  </span>
                </li>
              <% }); %>
                <li class="list-group-item mt-1 rounded">
                  
                  <strong>Coupon : </strong>                
                <button class="btn border bg-black text-white " id="showCouponButton">Show coupon</button>   

                <div class="" style="display:none;"  id="coupon-success">
                  <p style="color: green;"> Coupon applied</p>
                  <button id="unapplyCoupon" class="btn rounded-1" style="background-color: red; color: #fff;">Remove coupon</button>
                </div>            
            
                <div class="row" style="display: none;" id="couponContainer">
                    <div class="col-md-6 mt-4 d-flex flex-column">
                        <% coupons.forEach(coupon => { %>
                            <label>
                                <input type="radio" class="couponRadio" name="selectedCoupon" value="<%= coupon.couponCode %>">
                                <%= coupon.couponCode %>
                            </label>
                        <% }); %>
                    </div>
                  
                    <button class="btn border bg-black text-white mt-3" style="width: 11rem; height: 2rem; display: flex; align-items: center; justify-content: center;" id="applyCouponButton">Apply coupon</button>
                    
                    <div >
                    <p id="couponError" class="mt-3" style="color: red;"></p>
                    </div>
                  </div>
             
                

                </li>
        
                       <li id="totalAmount" class="list-group-item d-flex justify-content-end mt-2 text-white bg-black rounded">
                          <strong>Total : </strong>
                       <div id="totalAmountValue"><%= totalAmount %></div>
                        </li>

            </ul>

            <div id="paymentMethods" class="m-2">
              <div class="paymentMethod " data-method="cod" onclick="selectPaymentMethod('cod')">
                  <input type="radio" name="paymentMethod" value="cod" style="display: none;">
                  <label for="creditCard">Cash on delivery</label>
              </div>
              <div class="paymentMethod" data-method="Razorpay" onclick="selectPaymentMethod('Razorpay')">
                  <input type="radio" name="paymentMethod" value="Razorpay" style="display: none;">
                  <label for="Razorpay">Razorpay</label>
              </div>                
            </div>

        <button style="width: 22rem; color: #fff;" id="checkoutButton" class="btn btn-success m-2 p-3"> <!-- Add a submit button -->
          Checkout
        </button>
      </div>
    </div>
    

    <div class="modal fade" id="useraddress" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header" style="text-align: center; background-color: black; color: aliceblue;">
                    <h1 class="modal-title fs-5 " id="exampleModalLabel">Add Address</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="/addresscheckout" method="POST">
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="fullName" name="fullName" placeholder="" required>
                            <label for="fullName">Full Name</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="addressline1" name="addressline" placeholder="" required>
                            <label for="addressline">Address Line</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="city" name="city" placeholder="Enter City" required>
                            <label for="city">City</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="state" name="state" placeholder="Enter State" required>
                            <label for="state">State</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="pincode" name="pincode" placeholder="Enter Pincode" required>
                            <label for="pincode">Pincode</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="country" name="country" placeholder="Enter Country" required>
                            <label for="country">Country</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="phone" name="phone" placeholder="Enter Phone Number" required>
                            <label for="phone">Phone</label>
                        </div>
    
                        <div class="form-floating mb-3">
                            <input type="text" class="form-control" id="altPhone" name="altPhone" placeholder="Enter Alternative Phone Number">
                            <label for="altPhone">Alternative Phone</label>
                        </div>
    
                        <button class="btn btn-success" type="submit">Add Address</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
  </main>
</div>

<%- include("./partials/footer") %>
<script src="/javascripts/addressValidation.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  function selectPaymentMethod(method) {
    // Unselect all payment methods
    document.querySelectorAll('.paymentMethod input[type="radio"]').forEach(input => {
      input.checked = false;
    });
    
  // Select the clicked payment method
  const selectedInput = document.querySelector(`.paymentMethod[data-method="${method}"] input[type="radio"]`);
  selectedInput.checked = true;
  
}

// coupon management
document.getElementById('unapplyCoupon').addEventListener('click',()=>{
window.location.reload();
})

document.getElementById('showCouponButton').addEventListener('click', function () {
  let couponContainer = document.getElementById('couponContainer');
  couponContainer.style.display = couponContainer.style.display === 'none' ? 'block' : 'none';
});

document.getElementById('applyCouponButton').addEventListener('click', async function () {        
    var selectedCoupon = document.querySelector('.couponRadio:checked');
    let successmsg = document.getElementById("coupon-success");
  

    if (selectedCoupon) {
        var selectedCouponCode = selectedCoupon.value;           
        try {
            const response = await fetch('/apply-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ selectedCouponCode })
            });

            const data = await response.json();

            if (response.ok) {
              if(response.status==200){

                // document.getElementById('totalAmount').innerHTML = `<strong>Total : </strong> â‚¹${Math.floor(data.totalAmount)}`;
                // document.getElementById('totalAmountValue').innerHTML = `<strong>Total : </strong> â‚¹${Math.floor(data.totalAmount)}`;
                document.getElementById('totalAmountValue').innerHTML = `${Math.floor(data.totalAmount)}`;
                successmsg.style.display="block";
               

                // setTimeout(()=>{
                //   successmsg.style.display="none"
                // },2000)
                
              }else if(response.status==201){

                document.getElementById('couponError').innerHTML = data.error;
                setTimeout(()=>{
                  
                  document.getElementById('couponError').innerHTML = '';
                },2000)
              }else if(response.status==202){
                document.getElementById('couponError').innerHTML = data.error;
                setTimeout(()=>{                  
                  document.getElementById('couponError').innerHTML = '';
                },2000)
              }
                
            } 

            console.log(data);
        } catch (error) {
            console.error('Error applying coupon:', error);
        }
    } else {
        console.log('No coupon selected.');
    }
});


document.getElementById('checkoutButton').addEventListener('click', function () {
    const billingAddressRadio = document.querySelector('input[name="billingAddress"]:checked');
    const paymentMethodRadio = document.querySelector('input[name="paymentMethod"]:checked');
    var selectedCoupon = document.querySelector('.couponRadio:checked');
    
    if (selectedCoupon) {
        var selectedCouponCode = selectedCoupon.value;     
    }else{
      selectedCouponCode = null;
    }

    if (!billingAddressRadio) {
      alert('Please select a billing address.');
      return;
    }
    if (!paymentMethodRadio) {
      alert('Please select a payment method.');
      return;
    }
    const billingAddressIndex = billingAddressRadio.value;
    const paymentMethod = paymentMethodRadio.value;
    const totalAmountElement = document.querySelector("#totalAmountValue");
    const totalAmount = parseFloat(totalAmountElement.innerText);
    console.log(totalAmount);
    
    
      let razorpayTimestamp;


      const pollingInterval = 3000;

     Swal.fire({
      title: "Are you sure?",
      text: "Confirm this order",
      icon: "info",
      showCancelButton: true,
      confirmButtonColor: "#3085d6",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes"
    }).then(async(result) => {
      if (result.isConfirmed) {
       
        fetch('/checkout', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            billingAddress: billingAddressIndex,
            paymentMethod: paymentMethod,
            totalAmount:totalAmount,
            selectedCouponCode
          }),
        }).then(async response => {  // Fix: Change 'data' to 'response'
    console.log(response.status);
    if (response.status === 200) {
        console.log('Success:', response);
        await Swal.fire({
            title: "Confirmed",
            text: "Your Order is confirmed.",
            icon: "success"
        });
        window.location.href = "/success";
    } else if (response.status === 201) {
        console.log('razorpay');
        response.json().then((res) => {
            if (res.order) {                             
              // const pollIntervalId = setInterval(async () => {
              //   razorpayTimestamp = Date.now();
              //   const updatedCartResponse = await fetch('/getCartTimestamp');
              //   const updatedCartTimestamp = await updatedCartResponse.json();
              //     console.log(razorpayTimestamp);
              //     console.log(updatedCartTimestamp);

              //     if (updatedCartTimestamp > razorpayTimestamp) {                    
              //       clearInterval(pollIntervalId);
              //       window.location.reload();
              //      await Swal.fire('Cart Updated', 'The cart has been updated. Please reload the page.', 'warning');
              //     }
              //   }, pollingInterval);
              razorpayTimestamp = new Date();
              const pollIntervalId = setInterval(async () => {
                try {
                  const updatedCartResponse = await fetch('/getCartTimestamp');
                  const { updatedCartTimestamp } = await updatedCartResponse.json();

                  console.log('Razorpay Timestamp:', razorpayTimestamp);
                  // console.log('Updated Cart Timestamp:', updatedCartTimestamp);
                  
                  if (updatedCartTimestamp) {
                    // Convert both timestamps to JavaScript Date objects
                    const updatedCartDate = new Date(updatedCartTimestamp);
                    console.log('Updated Cart Timestamp 2::', updatedCartDate);
                    const razorpayDate = razorpayTimestamp;

                    if (updatedCartDate > razorpayDate) {
                      clearInterval(pollIntervalId);
                      window.location.reload();
                      await Swal.fire('Cart Updated', 'The cart has been updated. Please reload the page.', 'warning');
                    }
                  }
                } catch (error) {
                  console.error('Error during cart polling:', error);
                }
              }, pollingInterval);



                console.log(res.order);
                const amountInRupees = res.order.amount/100
                var options = {
                    key: 'rzp_test_S1qqFuHam7RlxX',
                    amount: amountInRupees,                    
                    currency: res.order.currency,
                    name: 'Electronics',
                    description: 'description',
                    order_id: res.order.id,
                    handler: async function (razorpayResponse) {
                        await fetch('/updatePayment', {
                            method: 'post',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                payment_details: razorpayResponse,
                                billingAddress: billingAddressIndex,
                                paymentMethod: paymentMethod,
                                totalAmount:amountInRupees,
                                selectedCouponCode:res.selectedCouponCode,                                                         
                            }),
                        });
                      
                        window.location.href = '/success';
                    },
                };

                var rzp = new Razorpay(options);
                rzp.open();
            }
        });
    } else if (response.status === 501) {
        await Swal.fire('Couldnt place order!', 'Insufficient Balance.', 'warning');
    } else {
        console.error('Failed to complete the order. Status code:', response.status);
    }
})
           
          }
        })
        .catch((error) => {
          console.error('Error:', error);
          // Handle errors, display an alert, or other actions
        });
});
</script>
<%- include("./partials/end") %>






